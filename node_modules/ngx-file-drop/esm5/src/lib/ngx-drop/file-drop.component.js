/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, NgZone, Renderer } from '@angular/core';
import { timer } from 'rxjs';
import { UploadFile } from './upload-file.model';
import { UploadEvent } from './upload-event.model';
var FileComponent = /** @class */ (function () {
    function FileComponent(zone, renderer) {
        var _this = this;
        this.zone = zone;
        this.renderer = renderer;
        this.headertext = '';
        this.customstyle = null;
        this.disableIf = false;
        this.onFileDrop = new EventEmitter();
        this.onFileOver = new EventEmitter();
        this.onFileLeave = new EventEmitter();
        this.stack = [];
        this.files = [];
        this.dragoverflag = false;
        this.globalDisable = false;
        this.numOfActiveReadEntries = 0;
        if (!this.customstyle) {
            this.customstyle = 'drop-zone';
        }
        this.globalStart = this.renderer.listen('document', 'dragstart', function (evt) {
            _this.globalDisable = true;
        });
        this.globalEnd = this.renderer.listen('document', 'dragend', function (evt) {
            _this.globalDisable = false;
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FileComponent.prototype.onDragOver = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.globalDisable && !this.disableIf) {
            if (!this.dragoverflag) {
                this.dragoverflag = true;
                this.onFileOver.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileComponent.prototype.onDragLeave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.globalDisable && !this.disableIf) {
            if (this.dragoverflag) {
                this.dragoverflag = false;
                this.onFileLeave.emit(event);
            }
            this.preventAndStop(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileComponent.prototype.dropFiles = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.globalDisable && !this.disableIf) {
            this.dragoverflag = false;
            event.dataTransfer.dropEffect = 'copy';
            /** @type {?} */
            var length_1;
            if (event.dataTransfer.items) {
                length_1 = event.dataTransfer.items.length;
            }
            else {
                length_1 = event.dataTransfer.files.length;
            }
            var _loop_1 = function (i) {
                /** @type {?} */
                var entry = void 0;
                if (event.dataTransfer.items) {
                    if (event.dataTransfer.items[i].webkitGetAsEntry) {
                        entry = event.dataTransfer.items[i].webkitGetAsEntry();
                    }
                }
                else {
                    if (event.dataTransfer.files[i].webkitGetAsEntry) {
                        entry = event.dataTransfer.files[i].webkitGetAsEntry();
                    }
                }
                if (!entry) {
                    /** @type {?} */
                    var file_1 = event.dataTransfer.files[i];
                    if (file_1) {
                        /** @type {?} */
                        var fakeFileEntry = {
                            name: file_1.name,
                            isDirectory: false,
                            isFile: true,
                            file: function (callback) {
                                callback(file_1);
                            }
                        };
                        /** @type {?} */
                        var toUpload = new UploadFile(fakeFileEntry.name, fakeFileEntry);
                        this_1.addToQueue(toUpload);
                    }
                }
                else {
                    if (entry.isFile) {
                        /** @type {?} */
                        var toUpload = new UploadFile(entry.name, entry);
                        this_1.addToQueue(toUpload);
                    }
                    else if (entry.isDirectory) {
                        this_1.traverseFileTree(entry, entry.name);
                    }
                }
            };
            var this_1 = this;
            for (var i = 0; i < length_1; i++) {
                _loop_1(i);
            }
            this.preventAndStop(event);
            /** @type {?} */
            var timerObservable = timer(200, 200);
            this.subscription = timerObservable.subscribe(function (t) {
                if (_this.files.length > 0 && _this.numOfActiveReadEntries === 0) {
                    _this.onFileDrop.emit(new UploadEvent(_this.files));
                    _this.files = [];
                }
            });
        }
    };
    /**
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    FileComponent.prototype.traverseFileTree = /**
     * @param {?} item
     * @param {?} path
     * @return {?}
     */
    function (item, path) {
        var _this = this;
        if (item.isFile) {
            /** @type {?} */
            var toUpload = new UploadFile(path, item);
            this.files.push(toUpload);
            this.zone.run(function () {
                _this.popToStack();
            });
        }
        else {
            this.pushToStack(path);
            path = path + '/';
            /** @type {?} */
            var dirReader_1 = ((/** @type {?} */ (item))).createReader();
            /** @type {?} */
            var entries_1 = [];
            /** @type {?} */
            var thisObj_1 = this;
            /** @type {?} */
            var readEntries_1 = function () {
                thisObj_1.numOfActiveReadEntries++;
                dirReader_1.readEntries(function (res) {
                    if (!res.length) {
                        // add empty folders
                        if (entries_1.length === 0) {
                            /** @type {?} */
                            var toUpload_1 = new UploadFile(path, item);
                            thisObj_1.zone.run(function () {
                                thisObj_1.addToQueue(toUpload_1);
                            });
                        }
                        else {
                            var _loop_2 = function (i) {
                                thisObj_1.zone.run(function () {
                                    thisObj_1.traverseFileTree(entries_1[i], path + entries_1[i].name);
                                });
                            };
                            for (var i = 0; i < entries_1.length; i++) {
                                _loop_2(i);
                            }
                        }
                        thisObj_1.zone.run(function () {
                            thisObj_1.popToStack();
                        });
                    }
                    else {
                        // continue with the reading
                        entries_1 = entries_1.concat(res);
                        readEntries_1();
                    }
                    thisObj_1.numOfActiveReadEntries--;
                });
            };
            readEntries_1();
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    FileComponent.prototype.addToQueue = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.files.push(item);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    FileComponent.prototype.pushToStack = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        this.stack.push(str);
    };
    /**
     * @return {?}
     */
    FileComponent.prototype.popToStack = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.stack.pop();
    };
    /**
     * @return {?}
     */
    FileComponent.prototype.clearQueue = /**
     * @return {?}
     */
    function () {
        this.files = [];
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FileComponent.prototype.preventAndStop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    /**
     * @return {?}
     */
    FileComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.globalStart();
        this.globalEnd();
    };
    FileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'file-drop',
                    template: "<div id=\"dropZone\"  [className]=\"customstyle\" [class.over]=\"dragoverflag\"\r\n    (drop)=\"dropFiles($event)\"\r\n    (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\">\r\n    <div class=\"content\">\r\n        <ng-content></ng-content>\r\n        {{headertext}}\r\n    </div>\r\n</div>\r\n",
                    styles: [".drop-zone{margin:auto;height:100px;border:2px dotted #0782d0;border-radius:30px}.content{color:#0782d0;height:100px;display:flex;justify-content:center;align-items:center}.over{background-color:rgba(147,147,147,.5)}"]
                }] }
    ];
    /** @nocollapse */
    FileComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: Renderer }
    ]; };
    FileComponent.propDecorators = {
        headertext: [{ type: Input }],
        customstyle: [{ type: Input }],
        disableIf: [{ type: Input }],
        onFileDrop: [{ type: Output }],
        onFileOver: [{ type: Output }],
        onFileLeave: [{ type: Output }]
    };
    return FileComponent;
}());
export { FileComponent };
if (false) {
    /** @type {?} */
    FileComponent.prototype.headertext;
    /** @type {?} */
    FileComponent.prototype.customstyle;
    /** @type {?} */
    FileComponent.prototype.disableIf;
    /** @type {?} */
    FileComponent.prototype.onFileDrop;
    /** @type {?} */
    FileComponent.prototype.onFileOver;
    /** @type {?} */
    FileComponent.prototype.onFileLeave;
    /** @type {?} */
    FileComponent.prototype.stack;
    /** @type {?} */
    FileComponent.prototype.files;
    /** @type {?} */
    FileComponent.prototype.subscription;
    /** @type {?} */
    FileComponent.prototype.dragoverflag;
    /** @type {?} */
    FileComponent.prototype.globalDisable;
    /** @type {?} */
    FileComponent.prototype.globalStart;
    /** @type {?} */
    FileComponent.prototype.globalEnd;
    /** @type {?} */
    FileComponent.prototype.numOfActiveReadEntries;
    /** @type {?} */
    FileComponent.prototype.zone;
    /** @type {?} */
    FileComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,