(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-file-drop', ['exports', '@angular/core', 'rxjs'], factory) :
    (factory((global['ngx-file-drop'] = {}),global.ng.core,global.rxjs));
}(this, (function (exports,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * fileEntry is an instance of {\@link FileSystemFileEntry} or {\@link FileSystemDirectoryEntry}.
     * Which one is it can be checked using {\@link FileSystemEntry.isFile} or {\@link FileSystemEntry.isDirectory}
     * properties of the given {\@link FileSystemEntry}.
     */
    var /**
     * fileEntry is an instance of {\@link FileSystemFileEntry} or {\@link FileSystemDirectoryEntry}.
     * Which one is it can be checked using {\@link FileSystemEntry.isFile} or {\@link FileSystemEntry.isDirectory}
     * properties of the given {\@link FileSystemEntry}.
     */ UploadFile = /** @class */ (function () {
        function UploadFile(relativePath, fileEntry) {
            this.relativePath = relativePath;
            this.fileEntry = fileEntry;
        }
        return UploadFile;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var UploadEvent = /** @class */ (function () {
        function UploadEvent(files) {
            this.files = files;
        }
        return UploadEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FileComponent = /** @class */ (function () {
        function FileComponent(zone, renderer) {
            var _this = this;
            this.zone = zone;
            this.renderer = renderer;
            this.headertext = '';
            this.customstyle = null;
            this.disableIf = false;
            this.onFileDrop = new core.EventEmitter();
            this.onFileOver = new core.EventEmitter();
            this.onFileLeave = new core.EventEmitter();
            this.stack = [];
            this.files = [];
            this.dragoverflag = false;
            this.globalDisable = false;
            this.numOfActiveReadEntries = 0;
            if (!this.customstyle) {
                this.customstyle = 'drop-zone';
            }
            this.globalStart = this.renderer.listen('document', 'dragstart', function (evt) {
                _this.globalDisable = true;
            });
            this.globalEnd = this.renderer.listen('document', 'dragend', function (evt) {
                _this.globalDisable = false;
            });
        }
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.onDragOver = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.globalDisable && !this.disableIf) {
                    if (!this.dragoverflag) {
                        this.dragoverflag = true;
                        this.onFileOver.emit(event);
                    }
                    this.preventAndStop(event);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.onDragLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.globalDisable && !this.disableIf) {
                    if (this.dragoverflag) {
                        this.dragoverflag = false;
                        this.onFileLeave.emit(event);
                    }
                    this.preventAndStop(event);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.dropFiles = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                var _this = this;
                if (!this.globalDisable && !this.disableIf) {
                    this.dragoverflag = false;
                    event.dataTransfer.dropEffect = 'copy';
                    /** @type {?} */
                    var length_1;
                    if (event.dataTransfer.items) {
                        length_1 = event.dataTransfer.items.length;
                    }
                    else {
                        length_1 = event.dataTransfer.files.length;
                    }
                    var _loop_1 = function (i) {
                        /** @type {?} */
                        var entry = void 0;
                        if (event.dataTransfer.items) {
                            if (event.dataTransfer.items[i].webkitGetAsEntry) {
                                entry = event.dataTransfer.items[i].webkitGetAsEntry();
                            }
                        }
                        else {
                            if (event.dataTransfer.files[i].webkitGetAsEntry) {
                                entry = event.dataTransfer.files[i].webkitGetAsEntry();
                            }
                        }
                        if (!entry) {
                            /** @type {?} */
                            var file_1 = event.dataTransfer.files[i];
                            if (file_1) {
                                /** @type {?} */
                                var fakeFileEntry = {
                                    name: file_1.name,
                                    isDirectory: false,
                                    isFile: true,
                                    file: function (callback) {
                                        callback(file_1);
                                    }
                                };
                                /** @type {?} */
                                var toUpload = new UploadFile(fakeFileEntry.name, fakeFileEntry);
                                this_1.addToQueue(toUpload);
                            }
                        }
                        else {
                            if (entry.isFile) {
                                /** @type {?} */
                                var toUpload = new UploadFile(entry.name, entry);
                                this_1.addToQueue(toUpload);
                            }
                            else if (entry.isDirectory) {
                                this_1.traverseFileTree(entry, entry.name);
                            }
                        }
                    };
                    var this_1 = this;
                    for (var i = 0; i < length_1; i++) {
                        _loop_1(i);
                    }
                    this.preventAndStop(event);
                    /** @type {?} */
                    var timerObservable = rxjs.timer(200, 200);
                    this.subscription = timerObservable.subscribe(function (t) {
                        if (_this.files.length > 0 && _this.numOfActiveReadEntries === 0) {
                            _this.onFileDrop.emit(new UploadEvent(_this.files));
                            _this.files = [];
                        }
                    });
                }
            };
        /**
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
        FileComponent.prototype.traverseFileTree = /**
         * @param {?} item
         * @param {?} path
         * @return {?}
         */
            function (item, path) {
                var _this = this;
                if (item.isFile) {
                    /** @type {?} */
                    var toUpload = new UploadFile(path, item);
                    this.files.push(toUpload);
                    this.zone.run(function () {
                        _this.popToStack();
                    });
                }
                else {
                    this.pushToStack(path);
                    path = path + '/';
                    /** @type {?} */
                    var dirReader_1 = (( /** @type {?} */(item))).createReader();
                    /** @type {?} */
                    var entries_1 = [];
                    /** @type {?} */
                    var thisObj_1 = this;
                    /** @type {?} */
                    var readEntries_1 = function () {
                        thisObj_1.numOfActiveReadEntries++;
                        dirReader_1.readEntries(function (res) {
                            if (!res.length) {
                                // add empty folders
                                if (entries_1.length === 0) {
                                    /** @type {?} */
                                    var toUpload_1 = new UploadFile(path, item);
                                    thisObj_1.zone.run(function () {
                                        thisObj_1.addToQueue(toUpload_1);
                                    });
                                }
                                else {
                                    var _loop_2 = function (i) {
                                        thisObj_1.zone.run(function () {
                                            thisObj_1.traverseFileTree(entries_1[i], path + entries_1[i].name);
                                        });
                                    };
                                    for (var i = 0; i < entries_1.length; i++) {
                                        _loop_2(i);
                                    }
                                }
                                thisObj_1.zone.run(function () {
                                    thisObj_1.popToStack();
                                });
                            }
                            else {
                                // continue with the reading
                                entries_1 = entries_1.concat(res);
                                readEntries_1();
                            }
                            thisObj_1.numOfActiveReadEntries--;
                        });
                    };
                    readEntries_1();
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FileComponent.prototype.addToQueue = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.files.push(item);
            };
        /**
         * @param {?} str
         * @return {?}
         */
        FileComponent.prototype.pushToStack = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                this.stack.push(str);
            };
        /**
         * @return {?}
         */
        FileComponent.prototype.popToStack = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var value = this.stack.pop();
            };
        /**
         * @return {?}
         */
        FileComponent.prototype.clearQueue = /**
         * @return {?}
         */
            function () {
                this.files = [];
            };
        /**
         * @param {?} event
         * @return {?}
         */
        FileComponent.prototype.preventAndStop = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopPropagation();
                event.preventDefault();
            };
        /**
         * @return {?}
         */
        FileComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
                this.globalStart();
                this.globalEnd();
            };
        FileComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'file-drop',
                        template: "<div id=\"dropZone\"  [className]=\"customstyle\" [class.over]=\"dragoverflag\"\r\n    (drop)=\"dropFiles($event)\"\r\n    (dragover)=\"onDragOver($event)\" (dragleave)=\"onDragLeave($event)\">\r\n    <div class=\"content\">\r\n        <ng-content></ng-content>\r\n        {{headertext}}\r\n    </div>\r\n</div>\r\n",
                        styles: [".drop-zone{margin:auto;height:100px;border:2px dotted #0782d0;border-radius:30px}.content{color:#0782d0;height:100px;display:flex;justify-content:center;align-items:center}.over{background-color:rgba(147,147,147,.5)}"]
                    }] }
        ];
        /** @nocollapse */
        FileComponent.ctorParameters = function () {
            return [
                { type: core.NgZone },
                { type: core.Renderer }
            ];
        };
        FileComponent.propDecorators = {
            headertext: [{ type: core.Input }],
            customstyle: [{ type: core.Input }],
            disableIf: [{ type: core.Input }],
            onFileDrop: [{ type: core.Output }],
            onFileOver: [{ type: core.Output }],
            onFileLeave: [{ type: core.Output }]
        };
        return FileComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var FileDropModule = /** @class */ (function () {
        function FileDropModule() {
        }
        FileDropModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FileComponent,
                        ],
                        exports: [FileComponent],
                        imports: [],
                        providers: [],
                        bootstrap: [FileComponent],
                    },] }
        ];
        return FileDropModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.FileComponent = FileComponent;
    exports.FileDropModule = FileDropModule;
    exports.UploadFile = UploadFile;
    exports.UploadEvent = UploadEvent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,