{"version":3,"sources":["ng://ngx-file-drop/src/lib/ngx-drop/upload-file.model.ts","ng://ngx-file-drop/src/lib/ngx-drop/upload-event.model.ts","ng://ngx-file-drop/src/lib/ngx-drop/file-drop.component.ts","ng://ngx-file-drop/src/lib/ngx-drop/file-drop.module.ts"],"names":["UploadFile","relativePath","fileEntry","this","UploadEvent","files","FileComponent","zone","renderer","_this","headertext","customstyle","disableIf","onFileDrop","EventEmitter","onFileOver","onFileLeave","stack","dragoverflag","globalDisable","numOfActiveReadEntries","globalStart","listen","evt","globalEnd","prototype","onDragOver","event","emit","preventAndStop","onDragLeave","dropFiles","length_1","dataTransfer","dropEffect","items","length","i","entry","webkitGetAsEntry","isFile","toUpload","name","this_1","addToQueue","isDirectory","traverseFileTree","file_1","fakeFileEntry","file","callback","timerObservable","timer","subscription","subscribe","t","item","path","push","run","popToStack","pushToStack","dirReader_1","createReader","entries_1","thisObj_1","readEntries_1","readEntries","res","concat","toUpload_1","str","pop","clearQueue","stopPropagation","preventDefault","ngOnDestroy","unsubscribe","Component","args","selector","template","NgZone","Renderer","Input","Output","FileDropModule","NgModule","declarations","exports","imports","providers","bootstrap"],"mappings":"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","sourcesContent":["import { FileSystemEntry, FileSystemFileEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n/**\r\n * fileEntry is an instance of {@link FileSystemFileEntry} or {@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {@link FileSystemEntry.isFile} or {@link FileSystemEntry.isDirectory}\r\n * properties of the given {@link FileSystemEntry}.\r\n */\r\nexport class UploadFile {\r\n    constructor(\r\n        public relativePath: string,\r\n        public fileEntry: FileSystemEntry) {\r\n    }\r\n}\r\n","import { UploadFile } from './upload-file.model';\r\n\r\nexport class UploadEvent {\r\n    constructor(\r\n        public files: UploadFile[]) {\r\n    }\r\n}\r\n","import { Component, Input, Output, EventEmitter, NgZone, OnDestroy, Renderer } from '@angular/core';\r\nimport { timer, Subscription } from 'rxjs';\r\n\r\nimport { UploadFile } from './upload-file.model';\r\nimport { UploadEvent } from './upload-event.model';\r\nimport { FileSystemFileEntry, FileSystemEntryMetadata, FileSystemEntry, FileSystemDirectoryEntry } from './dom.types';\r\n\r\n@Component({\r\n  selector: 'file-drop',\r\n  templateUrl: './file-drop.component.html',\r\n  styleUrls: ['./file-drop.component.scss']\r\n})\r\n\r\n\r\nexport class FileComponent implements OnDestroy {\r\n\r\n  @Input()\r\n  headertext: string = '';\r\n  @Input()\r\n  customstyle: string = null;\r\n  @Input()\r\n  disableIf: boolean = false;\r\n\r\n  @Output()\r\n  public onFileDrop: EventEmitter<UploadEvent> = new EventEmitter<UploadEvent>();\r\n  @Output()\r\n  public onFileOver: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output()\r\n  public onFileLeave: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  stack = [];\r\n  files: UploadFile[] = [];\r\n  subscription: Subscription;\r\n  dragoverflag: boolean = false;\r\n\r\n  globalDisable: boolean = false;\r\n  globalStart: Function;\r\n  globalEnd: Function;\r\n\r\n  numOfActiveReadEntries = 0\r\n\r\n  constructor(\r\n    private zone: NgZone,\r\n    private renderer: Renderer\r\n  ) {\r\n    if (!this.customstyle) {\r\n      this.customstyle = 'drop-zone';\r\n    }\r\n    this.globalStart = this.renderer.listen('document', 'dragstart', (evt) => {\r\n      this.globalDisable = true;\r\n    });\r\n    this.globalEnd = this.renderer.listen('document', 'dragend', (evt) => {\r\n      this.globalDisable = false;\r\n    });\r\n  }\r\n\r\n  public onDragOver(event: Event): void {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      if (!this.dragoverflag) {\r\n        this.dragoverflag = true;\r\n        this.onFileOver.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  public onDragLeave(event: Event): void {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      if (this.dragoverflag) {\r\n        this.dragoverflag = false;\r\n        this.onFileLeave.emit(event);\r\n      }\r\n      this.preventAndStop(event);\r\n    }\r\n  }\r\n\r\n  dropFiles(event: any) {\r\n    if (!this.globalDisable && !this.disableIf) {\r\n      this.dragoverflag = false;\r\n      event.dataTransfer.dropEffect = 'copy';\r\n      let length;\r\n      if (event.dataTransfer.items) {\r\n        length = event.dataTransfer.items.length;\r\n      } else {\r\n        length = event.dataTransfer.files.length;\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        let entry: FileSystemEntry;\r\n        if (event.dataTransfer.items) {\r\n          if (event.dataTransfer.items[i].webkitGetAsEntry) {\r\n            entry = event.dataTransfer.items[i].webkitGetAsEntry();\r\n          }\r\n        } else {\r\n          if (event.dataTransfer.files[i].webkitGetAsEntry) {\r\n            entry = event.dataTransfer.files[i].webkitGetAsEntry();\r\n          }\r\n        }\r\n        if (!entry) {\r\n          const file: File = event.dataTransfer.files[i];\r\n          if (file) {\r\n            const fakeFileEntry: FileSystemFileEntry = {\r\n              name: file.name,\r\n              isDirectory: false,\r\n              isFile: true,\r\n              file: (callback: (filea: File) => void): void => {\r\n                callback(file)\r\n              }\r\n            }\r\n            const toUpload: UploadFile = new UploadFile(fakeFileEntry.name, fakeFileEntry);\r\n            this.addToQueue(toUpload);\r\n          }\r\n        } else {\r\n          if (entry.isFile) {\r\n            const toUpload: UploadFile = new UploadFile(entry.name, entry);\r\n            this.addToQueue(toUpload);\r\n          } else if (entry.isDirectory) {\r\n            this.traverseFileTree(entry, entry.name);\r\n          }\r\n        }\r\n      }\r\n\r\n      this.preventAndStop(event);\r\n\r\n      const timerObservable = timer(200, 200);\r\n      this.subscription = timerObservable.subscribe(t => {\r\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\r\n          this.onFileDrop.emit(new UploadEvent(this.files));\r\n          this.files = [];\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n\r\n  private traverseFileTree(item: FileSystemEntry, path: string) {\r\n\r\n    if (item.isFile) {\r\n      const toUpload: UploadFile = new UploadFile(path, item);\r\n      this.files.push(toUpload);\r\n      this.zone.run(() => {\r\n        this.popToStack();\r\n      });\r\n    } else {\r\n      this.pushToStack(path);\r\n      path = path + '/';\r\n      const dirReader = (item as FileSystemDirectoryEntry).createReader();\r\n      let entries = [];\r\n      const thisObj = this;\r\n\r\n      const readEntries = function () {\r\n        thisObj.numOfActiveReadEntries++\r\n        dirReader.readEntries(function (res) {\r\n          if (!res.length) {\r\n            // add empty folders\r\n            if (entries.length === 0) {\r\n              const toUpload: UploadFile = new UploadFile(path, item);\r\n              thisObj.zone.run(() => {\r\n                thisObj.addToQueue(toUpload);\r\n              });\r\n            } else {\r\n              for (let i = 0; i < entries.length; i++) {\r\n                thisObj.zone.run(() => {\r\n                  thisObj.traverseFileTree(entries[i], path + entries[i].name);\r\n                });\r\n              }\r\n            }\r\n            thisObj.zone.run(() => {\r\n              thisObj.popToStack();\r\n            });\r\n          } else {\r\n            // continue with the reading\r\n            entries = entries.concat(res);\r\n            readEntries();\r\n          }\r\n          thisObj.numOfActiveReadEntries--\r\n        });\r\n      };\r\n\r\n      readEntries();\r\n    }\r\n  }\r\n\r\n  private addToQueue(item: UploadFile) {\r\n    this.files.push(item);\r\n  }\r\n\r\n  pushToStack(str) {\r\n    this.stack.push(str);\r\n  }\r\n\r\n  popToStack() {\r\n    const value = this.stack.pop();\r\n  }\r\n\r\n  private clearQueue() {\r\n    this.files = [];\r\n  }\r\n\r\n  private preventAndStop(event) {\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n    this.globalStart();\r\n    this.globalEnd();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {FileComponent} from './file-drop.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FileComponent,\r\n  ],\r\n  exports: [FileComponent],\r\n  imports: [],\r\n  providers: [],\r\n  bootstrap: [FileComponent],\r\n})\r\nexport class FileDropModule {}\r\n"]}